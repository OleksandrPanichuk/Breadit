generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique

  image String?

  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  commentVotes  CommentVote[]
  votes         Vote[]
  subscriptions Subscription[]

  subreddits Subreddit[] @relation("CreatedBy")
}

model Subreddit {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]

  creatorId String?
  creator   User?   @relation("CreatedBy", fields: [creatorId], references: [id])

  subscribers Subscription[]

  @@index([name])
  @@index([creatorId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content Json?

  comments Comment[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String
  votes       Vote[]

  @@index([subredditId])
  @@index([authorId])
}

model Vote {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  type VoteType

  @@index([postId])
  @@index([userId])
}

model Comment {
  id   String @id @default(cuid())
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?

  @@index([postId])
  @@index([authorId])
  @@index([replyToId])
}

enum VoteType {
  UP
  DOWN
}

model CommentVote {
  id String @id @default(cuid())

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type VoteType

  @@index([commentId])
  @@index([userId])
}

model Subscription {
  id String @id @default(cuid())

  subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  subredditId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([subredditId])
  @@index([userId])
}
